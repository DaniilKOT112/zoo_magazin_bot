from aiogram import Bot, types, Dispatcher
from aiogram.utils import executor
from dotenv import load_dotenv, find_dotenv
from aiogram.types import CallbackQuery
from aiogram.types import ReplyKeyboardMarkup
from database import connection

import os

load_dotenv(find_dotenv())

bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot)

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add('–ö–∞—Ç–∞–ª–æ–≥ üóÇÔ∏è').insert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ ‚ùó')


def get_categories():
    try:
        with connection.cursor() as cursor:
            cursor.execute('''
                SELECT name_categories 
                FROM public.categories''')
            result = cursor.fetchall()
            categories = [row[0] for row in result]
            return categories

    finally:
        connection.commit()


def create_product_inline_keyboard():
    inline_keyboard = types.InlineKeyboardMarkup()
    categories = get_categories()
    for category in categories:
        inline_keyboard.add(types.InlineKeyboardButton(text=category, callback_data=f'category_{category}'))

    return inline_keyboard


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω–∞! üò∏')
    await message.answer('–ù–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:')
    await bot.send_location(chat_id=message.chat.id, latitude=58.587313, longitude=49.663890, reply_markup=keyboard)
    await bot.send_sticker(message.from_user.id,
                           sticker='CAACAgIAAxkBAAJk2mVuaiRZ3JzzrajdS0ZD6jU5mldcAAKVHgAC4oIpSOvBo6-SQphqMwQ')


@dp.message_handler(text='–ö–∞—Ç–∞–ª–æ–≥ üóÇÔ∏è')
async def message_catalog(message: types.Message):
    inline_keyboard = create_product_inline_keyboard()
    await message.answer(f'–ù–∞—à –º–∞–≥–∞–∑–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=inline_keyboard)


@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ ‚ùó')
async def message_info(message: types.Message):
    await message.answer(f'–ú–∞–≥–∞–∑–∏–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ú–∏–ª–∏—Ü–µ–π—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥–æ–º 53')
    await message.answer(
        f'–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ üóìÔ∏è:\n'
        f'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00-19:00\n'
        f'–í—Ç–æ—Ä–Ω–∏–∫ 10:00-19:00\n'
        f'–°—Ä–µ–¥–∞ 10:00-19:00\n'
        f'–ß–µ—Ç–≤–µ—Ä–≥ 10:00-19:00\n'
        f'–ü—è—Ç–Ω–∏—Ü–∞ 10:00-19:00\n'
        f'–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00-17:00\n'
        f'–°—É–±–±–æ—Ç–∞  10:00-17:00\n')


@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def inline_category_callback(query: CallbackQuery):
    selected_category = query.data.split('_')[1]
    product_info_list = get_product(category=selected_category)

    if product_info_list:
        for product_info in product_info_list:
            product_info_filtered = {
                'ID —Ç–æ–≤–∞—Ä–∞': product_info[0],
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': product_info[1],
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product_info[3],
                '–û–ø–∏—Å–∞–Ω–∏–µ': product_info[4],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': product_info[5],
                '–¶–µ–Ω–∞': product_info[6]
            }

            product_info_str = '\n'.join([f'{key}: {value}' for key, value in product_info_filtered.items()])
            image_data = product_info[2]
            await bot.send_photo(chat_id=query.message.chat.id, photo=image_data,
                                 caption=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n{product_info_str}')

        inline_keyboard = create_product_inline_keyboard()
        await query.message.answer(f'–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!:', reply_markup=inline_keyboard)
    else:
        await query.message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{selected_category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


def get_product(category=None):
    try:
        with connection.cursor() as cursor:
            if category:
                cursor.execute('''
                    SELECT P.id_product, P.name, I.url, C.name_categories || ' - ' || PC.name AS category, P.description, P.amount, P.price
                    FROM public.product P
                    JOIN public.categories_parent_category CPC ON P.id_category = CPC.id_categories_parent_category
                    JOIN parent_category PC ON CPC.id_parent_categories = PC.id_parent_category
                    JOIN public.categories C ON CPC.id_categories = C.id_categories
                    JOIN public.image I ON P.id_image = I.id_image
                    WHERE C.name_categories = %s
                ''', (category,))
            data = cursor.fetchall()
            return data
    finally:
        connection.commit()


@dp.message_handler()
async def chat_answer(message: types.Message):
    await message.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
